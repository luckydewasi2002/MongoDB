1. Group users by role and calculate the average salary for each role.

$average ka use karke ham everage nikal sakty hai
ans=> db.user.aggregate(
  [
  {
    $group: {
      _id: "$role",
      averagesal:{$avg:"$salary"}
      }
  }
]
)
2. Group users by city and find the total number of users in each city.

db.user.aggregate(
  [
  {
    $group: {
      _id: "$city",
        user:{$sum:1}
      }
  }
]
)
3. Group users by gender and determine the average age for each gender.

db.user.aggregate(
  [
  {
    $group: {
      _id: "$gender",
       averageAge:{$avg:"$age"}
      }
  }
]
)
4. Group users by role and city, and calculate the total salary for each subgroup.

db.user.aggregate(
  [
  {
    $group: {
      _id: {role:"$role",city:"city"},
      totalsal:{$um:"$salary"}
      }
  }
]
)
5. Group users by gender and city, and find the maximum salary in each subgroup.
db.user.aggregate(
[
  {
    $group: {
     _id: {role:"$gender",city:"$city"},
      maxsal:{$max:"$salary"}
      }
  }
]
)
6. Group users by skills and count how many users have each skill.
$unwind ka use kregy array ko todne ke liy
db.user.aggregate
(
[
  {
   $unwind:"$skills"
  },
{
  $group: {
    _id: "$skills",
    skillcount:{$sum:1},
    user:{$push:"$$ROOT"}
  }
}
]
)
7. Group users by role and find the minimum age for each role.

db.user.aggregate(
  [
  {
    $group: {
      _id: "$role",
      minAge:{$min:"$age"}

    }
  }
]
)
8. Group users by city and gender, and calculate the average salary for each subgroup.
db.user.aggregate(
              on the top ^
)
9. Group users by role and determine the total number of unique cities for each role.
db.user.aggegate(
[
  {
    $group: {
      _id: "$role",
      uniqueCity:{$addToSet:"$city"}
    }
  },

  {
    $project: {
      totaluniqueCity:{$size:"$uniqueCity"}
    }
  }
]
)
10. Group users by age and count the number of users in each age group.

db.user.aggregate
(

[
  {
    $group: {
      _id: "$age",
      usercount:{$sum:1}
    }
      }
  ]
)
------------------------------------------
11. Group users by city and calculate the average number of skills per user in each city.
 db.user.aggregate(
 [
  {
    $project: {
      city:1,
      numberofSkills:{$size:"$skills"}
    }
  },
  {
    $group: {
      _id:"$city",
      averageSkills:{$avg:"$numberofskills"}

    }
  },
  {
    $project: {
      city:"$id",
      averageSkills:1
    }
  }
]
 )
 ------------------------------------------------------
12. Group users by role and find the highest salary in each role.
db.user.aggregate(
  [
  {
    $group: {
      _id: "$role",
      maxsal:{$max:"$salary"}
    }
  }
]
)
---------------------------------------------------------
13. Group users by gender and calculate the total number of users for each gender.
db.user.aggregate(
  [
  {
    $group: {
      _id: "$gender",
    totaluser:{$sum:1}
    }
  }
]
)
------------------------------------------------------
14. Group users by city and determine the average age for users in each city.
db.user.aggregate(
  [
  {
    $group: {
      _id: "$city",
    averageAge:{$avg:"$age"}
    }
  },
  {
    $project: {
   city:"$_id",
      averageAge:1
    }
  }
]
)
-------------------------------------
15. Group users by role and gender, and calculate the average salary for each subgroup.
db.user.aggregate(
  [
  {
    $group: {
      _id:{gender:"$gender",role:"$role"},
    averagesal:{$avg:"$salary"}
    }
  },
  {
    $project: {
   gender:"$_id.gender",
      role:"$_id.role",
      averagesalary:1
    }
  }

]
)
-------------------------------------------------------------------
16. Group users by skills and determine the total number of users for each skill.
db.user.aggregate(


[
  {
    $unwind: "$skills",

    },
  {
    $group: {
      _id: "$skills",
      totalUser:{$sum:1},

    }
  },
  {
    $project: {
      skills:"$_id",
      totalUser:1
    }
  }
]
)
---------------------------------------------------------------------------

17. Group users by age and find the maximum salary for each age group.
db.user.aggregate(
  [
  {
    $group: {
      _id: "$age",
      maxsalary:{$max:"$salary"}

    }
  },
  {
    $project: {
      age:"$_id",
      maxsal:1
    }
  }

]
)
-----------------------------------------------------------------------
18. Group users by role and calculate the total number of users with more than three skills.
db.user.aggregate(

[
  {
    $project:{
      role:1,
      numberofskills:{$size:"$skills"}
    }
  },
  {
   $match:{
     numberofskills:{$gt:3}
   }
  },

  {
    $group: {
      _id: "$role",
totalUser:{$sum:1}
    }
  },
  {
    $project: {
      role:1,
    numberofSkills:3,

    }
  }
]
)
-----------------------------------------------------------------
19. Group users by gender and city, and find the average number of skills per user in each subgroup.
db.user.aggregate(
  [
  {
    $project: {
      gender:1,
      city:1,
      numberofSkills:{$size:"$skills"}
    }
  },
  {
    $group: {
      _id:{gender:"$gender",city:"$city"},
      averageSkills:{$avg:"$numberofSkills"}

    }
  },
  {
    $project: {
      gender:"$_id.gender",
      city:"$_id.city",
      averageSkills:1
    }
  }
]
)
---------------------------------------------------------------------------------
20. Group users by role and determine the highest and lowest salaries for each role.
db.user.aggregate(
  [
    {
      $group:{
        _id:"$role",
        maxSal:{$max:"$salary"},
        minSal:{$min:"$salary"},

      }
    },
    {
      $project:{
        gender:"$_id.gender",
        city:"$_id.city",
        maxSal:1,
        minSal:1
      }
    }
  ]
)